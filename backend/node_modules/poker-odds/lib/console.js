'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.color = color;
exports.colorCards = colorCards;
exports.getHands = getHands;
exports.hasOption = hasOption;
exports.getOption = getOption;
var HAND_PATTERN = /^[AKQJT2-9.][schd.][AKQJT2-9.][schd.]$/;
var CONSOLE_COLORS = {
  black: '30',
  red: '31',
  green: '32',
  yellow: '33',
  blue: '34',
  magenta: '35',
  cyan: '36',
  white: '37',
  grey: '90'
};

function color(string, color) {
  if (!color || !CONSOLE_COLORS[color] || hasOption('--no-color')) {
    return string;
  }
  return '\x1B[' + CONSOLE_COLORS[color] + 'm' + string + '\x1B[0m';
}

function colorCards(cards) {
  return cards.map(colorCard).join(' ');
}

function colorCard(card) {
  if (/^.[sc]$/.test(card)) {
    return color(card, 'blue');
  }
  if (/^.[dh]$/.test(card)) {
    return color(card, 'red');
  }
  if (card === '..') {
    return color(card, 'yellow');
  }
  return card;
}

function getHands() {
  var argv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.argv;

  return argv.filter(function (string) {
    return HAND_PATTERN.test(string);
  });
}

function hasOption(option) {
  var argv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.argv;

  return argv.includes(option) || argv.includes('-' + option[2]);
}

function getOption(option) {
  var argv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.argv;

  var index = argv.indexOf(option);
  if (index === -1) {
    if (option.length !== 2) {
      return getOption('-' + option[2], argv);
    }
    return undefined;
  }
  var value = argv[index + 1];
  if (/^\d+$/.test(value)) {
    return parseInt(value);
  }
  return value;
}