#!/usr/bin/env node
'use strict';

var _package = require('../../package.json');

var _calculate = require('../calculate');

var _utils = require('../utils');

var _console = require('../console');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

if ((0, _console.hasOption)('--version')) {
  log();
  log('version', 'grey');
  log(_package.version);
  log();
  process.exit();
}

if ((0, _console.hasOption)('--help')) {
  log();
  log('usage', 'grey');
  log('poker-odds ' + (0, _console.color)('AsTd Qh8c', 'yellow'));
  log();
  log('options', 'grey');
  log('-b, --board ' + (0, _console.color)('Ts3s6d', 'yellow') + '     ' + (0, _console.color)('community cards', 'grey'));
  log('-i, --iterations ' + (0, _console.color)('1000', 'yellow') + '  ' + (0, _console.color)('number of preflop simulations to run, default: 100000', 'grey'));
  log('-e, --exhaustive       ' + (0, _console.color)('run all preflop simulations', 'grey'));
  log('-p, --possibilities    ' + (0, _console.color)('show individual hand possibilities', 'grey'));
  log('-n, --no-color         ' + (0, _console.color)('disable color output', 'grey'));
  log('-v, --version          ' + (0, _console.color)('show version', 'grey'));
  log('-h, --help             ' + (0, _console.color)('show help', 'grey'));
  log();
  process.exit();
}

var hands = (0, _console.getHands)();

if (hands.length === 0) {
  console.error('You must pass in at least one valid hand eg AsAc');
  process.exit(1);
}

var board = (0, _console.getOption)('--board');
var iterations = (0, _console.getOption)('--iterations');
var exhaustive = (0, _console.hasOption)('--exhaustive');
var start = +new Date();
var equity = (0, _calculate.calculateEquity)(hands.map(_utils.parseCards), (0, _utils.parseCards)(board), iterations, exhaustive);
var end = +new Date();

log();

if (board) {
  log('board', 'grey');
  log((0, _console.colorCards)((0, _utils.parseCards)(board)));
  log();
}
var hasTie = equity.filter(function (hand) {
  return hand.ties;
}).length !== 0;

log('hand      ' + (hands.length > 1 ? 'win' : '') + '     ' + (hasTie ? 'tie' : ''), 'grey');

equity.forEach(function (hand, index) {
  var string = (0, _console.colorCards)(hand.hand);
  if (hands.length > 1) {
    var winColor = hand.favourite ? 'green' : hand.wins === 0 ? 'grey' : null;
    string += (0, _console.color)((0, _utils.padStart)((0, _utils.percent)(hand.wins / hand.count), 8), winColor);
  }
  if (hand.ties) {
    string += (0, _console.color)((0, _utils.padStart)((0, _utils.percent)(hand.ties / hand.count), 8), 'yellow');
  }
  log(string);
});

if (hands.length === 1 || (0, _console.hasOption)('--possibilities')) {
  (function () {
    var maxes = equity.map(function (hand) {
      return Math.max.apply(Math, _toConsumableArray(hand.handChances.map(function (rank) {
        return rank.count;
      })));
    });
    log();
    if (hands.length > 1) {
      var header = ' '.repeat(15);
      equity.forEach(function (hand) {
        header += '   ' + (0, _console.colorCards)(hand.hand);
      });
      log(header);
    }

    var _loop = function _loop(i) {
      var string = (0, _console.color)((0, _utils.padEnd)(_utils.RANK_NAMES[i], 15), null);
      equity.forEach(function (hand, index) {
        var count = hand.handChances[i].count;

        var countColor = count === 0 ? 'grey' : count === maxes[index] ? 'green' : null;
        string += (0, _console.color)((0, _utils.padStart)((0, _utils.percent)(count / hand.count), 8), countColor);
      });
      log(string);
    };

    for (var i = 0; i !== _utils.RANK_NAMES.length; i++) {
      _loop(i);
    }
  })();
}

log();
log(equity[0].count + ' iterations in ' + (0, _utils.seconds)(end - start), 'grey');
log();

function log(string, colorName) {
  if (!string) {
    return console.log('');
  }
  if (colorName) {
    return console.log('  ' + (0, _console.color)(string, colorName));
  }
  console.log('  ' + string);
}