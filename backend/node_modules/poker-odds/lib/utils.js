'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numericalValue = numericalValue;
exports.numericalSort = numericalSort;
exports.convertToHex = convertToHex;
exports.parseCards = parseCards;
exports.percent = percent;
exports.seconds = seconds;
exports.getStraight = getStraight;
exports.padStart = padStart;
exports.padEnd = padEnd;
var CARD_VALUES = exports.CARD_VALUES = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
var CARD_SUITS = exports.CARD_SUITS = ['s', 'c', 'h', 'd'];
var RANK_NAMES = exports.RANK_NAMES = ['high card', 'one pair', 'two pair', 'three of a kind', 'straight', 'flush', 'full house', 'four of a kind', 'straight flush', 'royal flush'];
var NUMERICAL_VALUES = {
  T: 10,
  J: 11,
  Q: 12,
  K: 13,
  A: 14
};
var STRAIGHTS = ['AKQJT', 'KQJT9', 'QJT98', 'JT987', 'T9876', '98765', '87654', '76543', '65432', '5432A'];

function numericalValue(card) {
  return NUMERICAL_VALUES[card[0]] || parseInt(card[0]);
}

function numericalSort(a, b) {
  return numericalValue(b) - numericalValue(a);
}

function convertToHex(input) {
  input = typeof input === 'string' ? input.split('') : input;
  return input.map(function (c) {
    return numericalValue(c).toString(16);
  }).join('');
}

function parseCards(string) {
  if (!string) {
    return undefined;
  }
  return string.match(/[AKQJT2-9.][schd.]/g) || undefined;
}

function percent(number) {
  if (number === 0) {
    return 'Â·';
  }
  if (number > 0 && number < 0.001) {
    return '0.1%';
  }
  return round(number * 100) + '%';
}

function seconds(ms) {
  if (ms >= 1000) {
    return round(ms / 1000) + 's';
  }
  return ms + 'ms';
}

function getStraight(hand) {
  var values = hand.join('');
  var suffix = values[0] === 'A' ? 'A' : ''; // Append A to capture 5432A
  for (var i = 0; i !== STRAIGHTS.length; i++) {
    if (('' + values + suffix).includes(STRAIGHTS[i])) {
      return convertToHex(STRAIGHTS[i]);
    }
  }
  return null;
}

function padStart(string, length) {
  var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';

  if (string.length >= length) {
    return string;
  }
  return padString.repeat(length - string.length) + string;
}

function padEnd(string, length) {
  var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';

  if (string.length >= length) {
    return string;
  }
  return string + padString.repeat(length - string.length);
}

function round(number) {
  var dp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var multiplier = dp * 10;
  return (Math.round(number * multiplier) / multiplier).toFixed(dp);
}