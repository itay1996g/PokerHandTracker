'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rankValues = rankValues;
exports.rankHand = rankHand;
exports.getFlush = getFlush;

var _lookup = require('../lookup.json');

var _lookup2 = _interopRequireDefault(_lookup);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rankValues(values) {
  var total = 0;
  var max = 0;
  var cardMatches = {};
  for (var i = 0; i !== values.length; i++) {
    cardMatches[values[i]] = 0;
    for (var j = 0; j !== values.length; j++) {
      if (i === j) continue; // TODO: Could this be i <= j?
      var first = values[i];
      var second = values[j];
      if (first === second) {
        cardMatches[first]++;
        total++;
        max = Math.max(cardMatches[first], max);
      }
    }
  }
  var matches = total / 2;
  var straight = (0, _utils.getStraight)(dedupe(values)); // Dedupe to match straights like AKKKQJT
  var kickers = (0, _utils.convertToHex)(values.sort(function (a, b) {
    return cardMatches[b] - cardMatches[a];
  }));

  if (max > 3) {
    return undefined;
  }
  if (max === 3) {
    return '7' + kickers.slice(0, 4) + getHighestKicker(kickers.slice(4)); // four of a kind
  }
  if (max === 2 && matches > 3) {
    return '6' + kickers.slice(0, 5); // full house
  }
  if (straight) {
    return '4' + straight; // straight
  }
  if (max === 2) {
    return '3' + kickers.slice(0, 5); // three of a kind
  }
  if (max === 1 && matches > 1) {
    return '2' + kickers.slice(0, 4) + getHighestKicker(kickers.slice(4)); // two pair
  }
  if (max === 1) {
    return '1' + kickers.slice(0, 5); // one pair
  }
  return '0' + kickers.slice(0, 5); // high card
}

function rankHand(input) {
  var hand = input.slice(0).sort(_utils.numericalSort);
  var values = hand.map(function (c) {
    return c[0];
  }).join('');
  var suits = hand.map(function (c) {
    return c[1];
  }).sort().join('');

  var rank = _lookup2.default.rank[values];
  var flush = _lookup2.default.flush[suits];

  if (!rank) {
    throw Error('Invalid hand: ' + hand.join(' '));
  }

  var straight = rank[0] === '4';

  if (straight && flush) {
    var flushed = hand.filter(function (c) {
      return c[1] === flush;
    }).map(function (c) {
      return c[0];
    });
    var kickers = (0, _utils.getStraight)(flushed);
    if (kickers) {
      // royal or straight flush
      return (kickers[0] === 'e' ? '9' : '8') + kickers;
    }
  }
  if (flush) {
    // Fix kickers for flush
    // ie the highest cards of the flush suit
    var _kickers = (0, _utils.convertToHex)(hand.filter(function (c) {
      return c[1] === flush;
    }).slice(0, 5));
    return '5' + _kickers; // flush
  }
  return rank;
}

function getFlush(string) {
  var match = string.match(/(s{5}|c{5}|d{5}|h{5})/);
  return match ? match[0][0] : undefined;
}

function getHighestKicker(string) {
  return string.split('').sort().reverse()[0];
}

function dedupe(array) {
  return array.filter(function (item, index, array) {
    return array.indexOf(item) === index;
  });
}